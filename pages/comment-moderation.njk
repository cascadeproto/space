---
title: Comment Moderation
permalink: "/secret-moderation-hole/"
eleventyExcludeFromCollections: true
layout: raw.njk
nocomments: true
---

<h1>Comment Moderation</h1>

<form class="flow comment-moderation" name="approved-comments" netlify netlify-honeypot="sweetgoods">
    <div id="totalwaiting"></div>
    <p class="visually-hidden">Don't fill this out if you're human:
        <input type="text" name="sweetgoods" />
    </p>
    <p><label>Comment ID:
        <input type="text" name="comment_id" />
    </label></p>
    <p><label>IP address:
        <input type="text" name="commenter_ip" />
    </label></p>
    <p><label>User Agent:
        <input type="text" name="commenter_ua" />
    </label></p>
    <p><label>Time Posted:
        <input type="text" name="time" />
    </label></p>
    <p><label>Page:
        <input type="text" name="path" />
    </label></p>
    <p><label>Comment parent ID:
        <input type="text" name="parent" />
    </label></p>
    <p id="comment-parent"></p>
    <p><label>Name:
        <input type="text" name="name" />
    </label></p>
    <p><label>URL:
        <input type="text" name="url" />
    </label></p>
    <p>
        <label>Email:
            <input type="text" name="email" />
        </label>
        <a id="avatar-check">Check avatar</a>
        <img src="#" id="avatar-preview" notransform />
    </p>
    <p><strong>Comment:</strong></p>
    <p><pre><code id="comment"></code></pre></p>
    <p><label>Manual comment field:
        <textarea type="text" name="comment"></textarea>
    </label></p>
    <p><label>Password:
        <input type="password" name="pass" />
    </label></p>
    
    <p id="buttons">
        <button id="get-comments">Get Comment</button> • • • 
        <button id="approve-comment" type="submit">Approve</button> • • • 
        <a href="https://app.netlify.com/sites/cascading-space-2024/forms/66b6335471d4a60008fa2e4f">Delete</a>
    </p>
</form>

<style>
    .comment-moderation label {
        display: block;
        font-weight: bold;
    }
    .comment-moderation input,
    .comment-moderation textarea {
        display: block;
        width: 100%;
        padding: .3em;
        font-weight: normal;
    }
    .comment-moderation textarea {
        min-height: 15em;
    }
    .comment-moderation pre code {
        white-space: pre-wrap;
    }
    .comment-moderation button {
        background-color: blue;
        padding: .2em .5em;
        border-radius: 4px;
        border: 1px solid #00000044;
        color: white;
        font-weight: bold;
    }
    #approve-comment { background-color: green; }
</style>
<script type="module">
    const modform = document.querySelector('[name="approved-comments"]');
    const params = new URLSearchParams(document.location.search);
    const review_id = params.get('comment');

    async function getHash(message) {
        const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array
        const hashBuffer = await window.crypto.subtle.digest("SHA-256", msgUint8); // hash the message
        const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array
        const hashHex = hashArray
            .map((b) => b.toString(16).padStart(2, "0"))
            .join(""); // convert bytes to hex string
        return hashHex;
    }

    document.querySelector('#get-comments').addEventListener('click', async function(e){
        e.preventDefault();
        const pass = document.querySelector('form [name="pass"]').value;
        try {
            const request = await fetch('https://api.netlify.com/api/v1/forms/66b6335471d4a60008fa2e4f/submissions', {
                headers: {
                    'User-Agent': 'Comment Moderation using Forms API',
                    'Authorization': `Bearer ${pass}`
                }
            });
            if (request.ok) {
                const data = await request.json();
                console.log(data);
                let currentComment = review_id ? data.find(o => o.data.commentId === review_id) : null;
                console.log(currentComment);

                // Fill UI
                let plural = { verb: 'are', amount: data.length, suffix: 's' };
                switch (data.length) {
                    case 0: plural = { verb: 'are', amount: 'no', suffix: 's' }; break;
                    case 1: plural = { verb: 'is', amount: data.length, suffix: '' }; break;
                }
                let queueHTML = '';
                for (let i = 0; i < data.length; i++) {
                    queueHTML = queueHTML + `<li><a href="/secret-moderation-hole/?comment=${data[i].data.commentId}">By ${data[i].data.name} on ${data[i].data.path} at ${data[i].created_at}</a></li>`;
                }
                document.querySelector('#totalwaiting').innerHTML = `<p>There ${plural.verb} ${plural.amount} comment${plural.suffix} awaiting moderation:</p><ul>${queueHTML}</ul>`;
                if (currentComment) {
                    document.querySelector('form [name="comment_id"]').value = currentComment.data.commentId;
                    document.querySelector('form [name="commenter_ip"]').value = currentComment.data.ip;
                    document.querySelector('form [name="commenter_ua"]').value = currentComment.data.user_agent;
                    document.querySelector('form [name="time"]').value = currentComment.created_at;
                    document.querySelector('form [name="path"]').value = currentComment.data.path;
                    document.querySelector('form [name="parent"]').value = currentComment.data.parent;
                    document.querySelector('form [name="name"]').value = currentComment.data.name;
                    document.querySelector('form [name="url"]').value = currentComment.data.url;
                    document.querySelector('form [name="email"]').value = currentComment.data.email;
                    document.querySelector('form [id="comment"]').innerHTML = currentComment.data.comment;
                }
            } else {
                console.error('Request:')
                console.error(request);
                console.error(request.text());
            }
        } catch (error) {
            console.error(error);
        }
    });
    document.querySelector('#avatar-check').addEventListener('click', function(e){
        e.preventDefault();
        const img = document.querySelector('#avatar-preview');
        let email = document.querySelector('form [name="email"]').value;
        console.log('Hashing: ' + email);
        getHash(email).then((hash) => {
            console.log('Hash: ' + hash);
            img.src = `https://www.gravatar.com/avatar/${hash}`;
        })
        .catch(err => {
            console.error(err);
        });
    })
</script>